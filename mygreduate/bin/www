#!/usr/bin/env node

/**
 * Module dependencies.
 */
//加入所需的模块
var app = require('../app');
//引入模块的时候立即创建
var debug = require('debug')('mygreduate:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

 //console.log(app);
 console.log(process.env.port);


//这个normallizePort()函数
var port = normalizePort(process.env.PORT || '3000');
//调用这个方法，会将给app函数对象的setting属性中添加port
app.set('port', port);

//console.log(app);
/**
 * Create HTTP server.
 */
    //创建一个服务器，。。。express()返回的就是一个函数对象
var server = http.createServer(app);
//打印app的类型
//console.log(typeof app);

/**
 * Listen on provided port, on all network interfaces.
 */

//服务器的基本配置
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

//错误处理函数
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
